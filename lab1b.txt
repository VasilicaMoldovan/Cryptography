---
format: markdown
title: Laboratory 1 - Moldovan Vasilica-Andreea
...

The first algorithm for computing the greatest common divisor of two natural numbers is  
Euclid's algorithm.
This algorithm is constructed around the fact that gcd(a, b) = gcd(b - a, a) if b > a or gcd(a - b, b).
This is true because if we have d a natural number, and d|a and d|b, than d|abs(a-b). But if we do enough
consecutive subtractions, (b - a), we end up with the remainder from b / a. This is why we use b % a, instead of
b - a. The stop condition is the equality between a and 0: if a is 0, it means that b % a == 0 <=> a | b, and we found
the gcd.

*Proof*: \
    Lets suppose b >= a, where a,b are two natural numbers. From the Remainder Theorem 
    we know that b = q * a + r, where q, r are the quotient and the rest, and 0 <= r < a. \
    Then if d = gcd(a, b) and d<sub>1</sub> = gcd(r, a), we need to prove that d = d<sub>1</sub>. \
    d<sub>1</sub> | a and d<sub>1</sub> | r => d<sub>1</sub> | (q * a) + r <=> d<sub>1</sub> | b. \
    d | a => d | q * a. Since d | a => d | (b - q * a) => d | r. \
    Suppose that d > d<sub>1</sub>. We proved that d | a and d | r, but we know that d<sub>1</sub> = gcd(r, a), 
    meaning that d<sub>1</sub> is the greatest common divisor of a and r, so it is impossible that 
    d | a and d | r (meaning that d is a common divisor) and d > d<sub>1</sub>. Hence, d = d<sub>1</sub> and 
    gcd(a, b) = gcd(r, a).
    
*Example*: gcd(18, 48) = ? \
        Lets denote by d = gcd(18, 48) \
        18 != 0 => d = gcd(48 % 18, 18) = gcd(12, 18) \
        12 != 0 => d = gcd(18 % 12, 12) = gcd(6, 12)  \
        6 != 0 => d = gcd(12 % 6, 6) = gcd(0, 6)
        0 == 0 => d = 6 => gcd(18, 48) = 6

~~~~~{.python}
<<Euclid Gcd>>=
def euclid_gcd(a, b):
    if a == 0:
        return b;
    return euclid_gcd(b % a, a)
@
~~~~~

The second gcd algorithm is the binary algorithm for determining the greatest common divisor of two natural numbers. \

*Description and Proof*: \
This algorithm has as stop conditions some particular cases, namely:
1. if the two numbers are equal, then the gcd is equal to them (they all divide each other)
2. if one of the numbers is 0, the gcd is the other number, because everything divides 0 \
Then we divide our algorithm in 4 other cases, according to numbers parity:
1. if a is even and b is even, then we know that 2 | a and 2 | b and gcd(a, b) = 2 * gcd(a / 2, b / 2)
2. if a is even and b is odd, then gcd(a, b) = gcd(a / 2, b). 2 is not a part from gcd's prime factorization
because b is not divisible by 2.
3. if a is odd and b is even, we have the same situation as in (2) but with a instead of b, and b instead of a. Then,
gcd(a, b) = gcd(a, b / 2)
4. if both a and b are odd: the gcd of a and b, divides them both, meaning that, it also divides their difference. 
Since both of the numbers are odd, their difference will be an even number, and we can divide it by 2, because 2 will not appear
as a factor in the factorization of the gcd(2 does not divide a nor b). \

*Example*: \
Lets denote by d = binary_gcd(78, 36), d = ? \
78 is even and 36 is even => d = gcd(78 / 2, 36 / 2) * 2 = gcd(39, 18) * 2 \
39 is odd and 18 is even => gcd(39, 18) = gcd(39, 18 / 2) = gcd(39, 9) \
both 39 and 9 are odd => gcd(39, 9) = gcd((39 - 9) / 2, 9) = gcd(15, 9) \
both 15 and 9 are odd => gcd(15, 9) = gcd((15 - 9) / 2, 9) = gcd(3, 9) \
both 3 and 9 are odd => gcd(3, 9) = gcd((9 - 3) >> 1, 3) = gcd(3, 3) \
3 == 3 => 3 = gcd(3, 3) = gcd(3, 9) = ... = gcd(39, 18) \
Then, d = gcd(39, 18) * 2 = 3 * 2 = 6.

~~~~~{.python}
<<Binary Gcd>>=
def binary_gcd(a, b):
    if a == b:
        return a

    if a == 0:
        return b

    if b == 0:
        return a

    #if a is even
    if (~a & 1) == 1:
        #if b is even
        if (~b & 1) == 1:
            return (binary_gcd(a >> 1, b >> 1) << 1)
        return binary_gcd(a >> 1, b)

    #if a is odd and b is even
    if (~b & 1) == 1:
        return binary_gcd(a, b >> 1)

    #both a and b are odd, we need to use their difference, which will be an even number
    if a > b:
        return binary_gcd((a - b) >> 1, b)
    return binary_gcd((b - a) >> 1, a)
@
~~~~~

This function determines the representation of a natural number as a product of powers of
prime numbers. It checks if a given number i, smaller than the square root of the number a, for which 
we want the prime factorization, is a divisor of a. The algorithm starts from i = 2, and it does not
check if i is prime. It bases on the fact that before encountering a composite number m = n * p, 
the algorithm already encounters its divisors, and it divides the number a by them. So if m | a, 
and m is a composite numbers, m will not appear in the prime factorization of a, because the prime 
factors of m will appear.

~~~~~{.python}
<<Prime Factorization>>=
def prime_factorization(a, i = 2):
    tuple_list = {}
    n = a
    power = 0
    while i * i <= a and not power:
        power = 0
        while n % i == 0:
            power += 1
            n //= i
        if power != 0:
            tuple_list[i] = power
            tuple_list.update(prime_factorization(n, i + 1))
        i += 1
    if not tuple_list and a != 1:
        tuple_list[a] = 1

    return tuple_list
@
~~~~~

The third algorithm is the prime factorization algorithm for determining the greatest common divisor of two natural numbers.
It takes the two prime factorizations of a and b, checks for every prime factor from the shortest 
factorization if it appears in the other factorization too, and if it does, it multuplies the gcd with the smallest power
of it from the two factorizations. \
The proof is straight-forward since this is the mathematical way to obtain the greatest common divisor. \

*Example*: gcd(102, 210) = ? \
prime_factors_102 = {2 : 1, 3 : 1, 17 : 1} \
prime_factors_210 = {2 : 1, 3 : 2, 11 : 1} \
gcd = 1 \
gcd *= pow(2, 1) => gcd = 2 \
gcd *= pow(3, 1) => gcd = 6 \
Then, gcd(102, 210) = 6.

~~~~~{.python}
<<Prime Factorization Gcd>>=
def prime_fact_gcd(a, b):
    prime_factors_a = prime_factorization(a)
    prime_factors_b = prime_factorization(b)
    gcd = 1
    if len(prime_factors_a) < len(prime_factors_b):
        for key in prime_factors_a:
            if key in prime_factors_b:
                gcd *= pow(key, min(prime_factors_a[key], prime_factors_b[key]))
    else:
        for key in prime_factors_b:
            if key in prime_factors_a:
                gcd *= pow(key, min(prime_factors_a[key], prime_factors_b[key]))

    return gcd
@
~~~~~

This function compares the execution times of the three gcd algorithms described above.
The smallest execution time is obtained by the euclidian algorithm, which is followed by 
the binary algorithm, and in the end, the slowest from those three, is the prime factorization 
algorithm(as expected), because it has too construct the prime factorizations for the two numbers. \
Also, regarding large numbers, all of them work, but the best is still the euclidean algorithm. If the large 
numbers are composite, the prime factorization algorithm is a little faster than the binary one.

~~~~~{.python}
<<Compare Performances>>=
def compare_performances():
    start = default_timer()
    gcd = euclid_gcd(14, 4748292)
    print("Euclid (14, 4748292): " + str(default_timer() - start))
    start = default_timer()
    gcd = binary_gcd(14, 4748292)
    print("Binary (14, 4748292): " + str(default_timer() - start))
    start = default_timer()
    gcd = prime_fact_gcd(14, 4748292)
    print("Prime factorization (14, 4748292): " + str(default_timer() - start))
    start = default_timer()
    gcd = euclid_gcd(12, 224)
    print("Euclid (12, 224): " + str(default_timer() - start))
    start = default_timer()
    gcd = binary_gcd(12, 224)
    print("Binary (12, 224): " + str(default_timer() - start))
    start = default_timer()
    gcd = prime_fact_gcd(12, 224)
    print("Prime factorization (12, 224): " + str(default_timer() - start))
    start = default_timer()
    gcd = euclid_gcd(pow(2, 34) * 81, pow(3, 29) * 32)
    print("Euclid (pow(2, 34) * 81, pow(3, 29) * 32): " + str(default_timer() - start))
    start = default_timer()
    gcd = binary_gcd(pow(2, 34) * 81, pow(3, 29) * 32)
    print("Binary (pow(2, 34) * 81, pow(3, 29) * 32): " + str(default_timer() - start))
    start = default_timer()
    gcd = prime_fact_gcd(pow(2, 34) * 81, pow(3, 29) * 32)
    print("Prime factorization (pow(2, 34) * 81, pow(3, 29) * 32): " + str(default_timer() - start))
@
~~~~~

~~~~~{.python}
<<*>>=
<<Euclid Gcd>>
<<Binary Gcd>>
<<Prime Factorization>>
<<Prime Factorization Gcd>>
<<Compare Performances>>
from timeit import default_timer
compare_performances()
@
~~~~~
.


